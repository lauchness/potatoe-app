{"version":3,"sources":["dancing-tato.gif","translations.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","en","sentence","button","fr","de","jp","nl","pigLatin","calc","x","y","window","innerWidth","innerHeight","translate","App","indexRef","useRef","languages","Object","keys","translations","console","log","useState","currentLanguage","setCurrentLangauge","useSpring","xy","config","mass","tension","friction","mouseSpring","setMouseSpring","className","onMouseMove","clientX","clientY","type","onClick","e","current","length","div","style","transform","interpolate","src","dancingTato","alt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,0C,uKCA5B,GACbC,GAAI,CACFC,SAAU,wBACVC,OAAQ,mBAEVC,GAAI,CACFF,SAAU,yBACVC,OAAQ,qBAEVE,GAAI,CACFH,SAAU,wBACVC,OAAQ,qBAEVG,GAAI,CACFJ,SAAU,8EACVC,OAAQ,sFAEVI,GAAI,CACFL,SAAU,yBACVC,OAAQ,iBAEVK,SAAU,CACRN,SAAU,4BACVC,OAAQ,sB,gBCjBNM,G,MAAO,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAIE,OAAOC,WAAa,EAAGF,EAAIC,OAAOE,YAAc,KACtEC,EAAY,SAACL,EAAGC,GAAJ,4BAAyBD,EAAI,EAA7B,YAmDHM,MAjDf,WACE,IAAMC,EAAWC,iBAAO,GAClBC,EAAYC,OAAOC,KAAKC,GAE9BC,QAAQC,IAAIL,GAJC,MAMiCM,mBAASN,EAAU,IANpD,mBAMNO,EANM,KAMWC,EANX,OAiByBC,aAAU,iBAAO,CACrDC,GAAI,CAAC,EAAG,GACRC,OAAQ,CAAEC,KAAM,GAAIC,QAAS,IAAKC,SAAU,QAnBjC,mBAiBNC,EAjBM,KAiBOC,EAjBP,KAsBb,OACE,yBACEC,UAAU,MACVC,YAAa,gBAAY3B,EAAZ,EAAG4B,QAAqB3B,EAAxB,EAAe4B,QAAf,OACXJ,EAAe,CAAEN,GAAIpB,EAAKC,EAAGC,OAG/B,yBAAKyB,UAAU,YAAYd,EAAaI,GAAiBxB,UACzD,4BACEkC,UAAU,kBACVI,KAAK,SACLC,QAzBmB,SAAAC,GACnBzB,EAAS0B,UAAYxB,EAAUyB,OAAS,EAC1C3B,EAAS0B,QAAU,EAEnB1B,EAAS0B,QAAU1B,EAAS0B,QAAU,EAExChB,EAAmBR,EAAUF,EAAS0B,YAqBjCrB,EAAaI,GAAiBvB,QAEjC,kBAAC,IAAE0C,IAAH,CACET,UAAU,UACVU,MAAO,CACLC,UAAWb,EAAYL,GAAGmB,YAAYjC,KAGxC,yBAAKkC,IAAKC,IAAaC,IAAI,uBCxCfC,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8ecf429a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dancing-tato.ecc88a68.gif\";","export default {\n  en: {\n    sentence: \"Long live the potatoe\",\n    button: \"Change Language\"\n  },\n  fr: {\n    sentence: \"vive la pomme de terre\",\n    button: \"changer de langue\"\n  },\n  de: {\n    sentence: \"Es lebe die Kartoffel\",\n    button: \"Sprache ändern\"\n  },\n  jp: {\n    sentence: \"じゃがいもの長生き (Jagaimo no nagaiki)\",\n    button: \"言語を変えてください Gengo o kaete kudasai\"\n  },\n  nl: {\n    sentence: \"lang leve de aardappel\",\n    button: \"taal wijzigen\"\n  },\n  pigLatin: {\n    sentence: \"ongla ivela heta otatoepa\",\n    button: \"angecha anguagela\"\n  }\n};\n","import React, { useState, useRef } from \"react\";\nimport { useSpring, animated as a } from \"react-spring\";\nimport translations from \"./translations\";\nimport dancingTato from \"./dancing-tato.gif\";\nimport \"./App.css\";\n\nconst calc = (x, y) => [x - window.innerWidth / 2, y - window.innerHeight / 2];\nconst translate = (x, y) => `translate3d(${x / 2}px,0,0)`;\n\nfunction App() {\n  const indexRef = useRef(0);\n  const languages = Object.keys(translations);\n\n  console.log(languages);\n\n  const [currentLanguage, setCurrentLangauge] = useState(languages[0]);\n\n  const handleClickEvent = e => {\n    if (indexRef.current === languages.length - 1) {\n      indexRef.current = 0;\n    } else {\n      indexRef.current = indexRef.current + 1;\n    }\n    setCurrentLangauge(languages[indexRef.current]);\n  };\n\n  const [mouseSpring, setMouseSpring] = useSpring(() => ({\n    xy: [0, 0],\n    config: { mass: 10, tension: 550, friction: 40 }\n  }));\n\n  return (\n    <div\n      className=\"App\"\n      onMouseMove={({ clientX: x, clientY: y }) =>\n        setMouseSpring({ xy: calc(x, y) })\n      }\n    >\n      <div className=\"sentence\">{translations[currentLanguage].sentence}</div>\n      <button\n        className=\"change-language\"\n        type=\"button\"\n        onClick={handleClickEvent}\n      >\n        {translations[currentLanguage].button}\n      </button>\n      <a.div\n        className=\"potatoe\"\n        style={{\n          transform: mouseSpring.xy.interpolate(translate)\n        }}\n      >\n        <img src={dancingTato} alt=\"Dancing potatoe\" />\n      </a.div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}